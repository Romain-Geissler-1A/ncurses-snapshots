---------------------------------------------------------------------
             How to install Ncurses/Terminfo on your system 
---------------------------------------------------------------------
    ************************************************************
    * READ ALL OF THIS FILE BEFORE YOU TRY TO INSTALL NCURSES. *
    ************************************************************

You should be reading the file INSTALL in a directory called
ncurses-d.d.d, where d.d.d is the current version number.  There
should be several subdirectories, including `c++', `form', `man', `menu',
'misc', `ncurses', `panel', `progs', and `test'.  See the README file
for a roadmap to the package.

If you are a Linux or FreeBSD or NetBSD distribution integrator or packager,
please read and act on the section titled IF YOU ARE A SYSTEM INTEGRATOR
below.

If you are converting from BSD curses and do not have root access, be sure
to read the BSD CONVERSION NOTES section below.

If you are trying to build GNU Emacs using ncurses for terminal support,
read the USING NCURSES WITH EMACS section below.

REQUIREMENTS:

You will need the following in order to build and install ncurses under UNIX:

	* ANSI C compiler  (gcc is recommended)
	* sh               (bash will do)
	* awk              (mawk or gawk will do)
	* sed
	* BSD or System V style install (a script is enclosed)

INSTALLATION PROCEDURE:

1.  IF YOU HAVE ROOT: First, decide where you want to put the object files of
    terminal descriptions. (If you don't have root, you may skip this step.)
    The default is /usr/lib/terminfo.  If your system already has a
    terminfo database, you can put it somewhere else.

    The --prefix option to configure changes the root directory for installing
    ncurses; the default is in subdirectories of /usr/, unless the
    configure script finds the `tic' program installed in a different place
    within your path (e.g., finding /usr/bin/tic makes the default prefix
    /usr/bin):

    bin - tic, infocmp, clear, tput
    lib - libncurses*.*
    lib/terminfo - compiled terminal descriptions
    man - man pages
    include - C header files

    If you want to put the terminal descriptions in, for example,
    /usr/share/lib/terminfo, you can either make that a symbolic link to
    /usr/lib/terminfo, or type `./configure --with-datadir=/usr/share/lib/terminfo'.
    This is particularly useful if your system already has a terminfo database.
    This option allows you to place ncurses' terminfo in an alternate location.
    You can use TERMINFO to point to the appropriate directory.

2.  Type `./configure' to configure ncurses for your operating system and create
    the Makefiles.  Various configuration options are available to customize
    the installation; use `./configure --help' to list the available options.

    It will create your Makefiles.  If your operating system is not supported,
    read the PORTABILITY section in the file ncurses/README for information on
    how to create a configuration file for your system.

    The `configure' script generates makefile rules for one or more object
    models and their associated libraries:

	libncurses.a (normal)

	libncurses.so (shared)

	libncurses_g.a (debug)

	libncurses_p.a (profile)

    If you do not specify any models, the normal and debug libraries will be
    configured.  This is equivalent to

    	./configure --with-normal --with-debug

    Rules for generating shared libraries are highly dependent upon the choice
    of host system and compiler.  We've been testing shared libraries on linux
    and sunos with gcc, but more work needs to be done to make shared libraries
    work on other systems.

    If you have the capability to make a publicly accessible terminfo database,
    use the --disable-termcap switch.  This removes the automatic fallback to
    the termcap file normally compiled in, making the curses library 
    significantly smaller because the initialization code doesn't have to 
    carry around the entire termcap-to-terminfo compiler.

3.  Type `make'.  Ignore any warnings, no error messages should be produced. 
    This should compile the library, the terminfo compiler (tic), the infocmp,
    clear and tput programs (see the man pages for explanation of what they
    do), some test programs, and the panels and menus libraries.
    Read the file test/README for details on the test programs.

4.  Run ncurses and several other test programs in the test directory to
    verify that ncurses functions correctly before overwriting any system
    files.

    The ncurses program is designed specifically to test the ncurses library.
    You can use it to verify that the screen highlights work correctly, that
    cursor addressing and window scrolling works OK, etc.

5.  If you are running SLS, Slackware, or any Linux distribution based on
    them, you may already have an older version of ncurses installed.  If so,
    you must remove the old files from /usr/include and the old libraries
    from /usr/lib before installing ncurses.  Otherwise, you may have
    compilation errors or linkage problems because you're picking up the old
    files.

    If you have BSD curses installed in your system and you accidentally
    compile using its curses.h you'll end up with a large number of
    undefined symbols at link time. _waddbytes is one of them.

6.  IF YOU HAVE ROOT: You can type `make install' to install the libraries,
    the programs, the terminfo database and the man pages.  Alternately, you
    can type `make install' in each directory you want to install.  In the
    top-level directory, you can do a partial install using these commands:
 
	'make install.progs'    installs tic, infocmp, clear and tput.
  	'make install.includes' installs the headers.
  	'make install.libs'     installs the libraries.
  	'make install.data'     installs the terminfo data. (Note: `tic' must
	                        be installed before the terminfo data can be
			        compiled).
	'make install.man'      installs the man pages.

  ############################################################################
  #     CAVEAT EMPTOR: `install.data' run as root will NUKE any existing     #
  #  terminfo database. If you have any custom or unusual entries SAVE them  #
  #  before you install ncurses.  I have a file called terminfo.custom for   #
  #  this purpose.  Don't forget to run tic on the file once you're done.    #
  ############################################################################

    The terminfo(5) manual page wants to be preprocessed with tbl(1) before
    being formatted by nroff(1).  Modern man(1) implementations tend to do
    this by default, but you may want to look at your version's man page
    to be sure.

    If the system already has a curses library that you need to keep using
    for some bizarre binary-compatibility reason, you'll need to distinguish
    between it and ncurses. If ncurses is installed outside the standard
    directories (/usr/include and /usr/lib) then all your users will need
    to use the -I option to compile programs and -L to link them.

    IF YOU DO NOT HAVE ROOT: Change directory to the `progs' subdirectory
    and run the `capconvert' script.  This script will deduce various things
    about your environment and use them to build you a private terminfo tree,
    so you can use ncurses applications.

    If more than one user at your site does this, the space for the duplicate
    trees is wasted.  Try to get your site administrators to install a system-
    wide terminfo tree instead.

    See the BSD CONVERSION NOTES section below for a few more details.

7.  The c++ directory has C++ classes that are built on top of ncurses and
    panels.  You need to have c++ (and its libraries) installed before you can
    compile and run the demo.

8.  If you're running under Linux, you must either (a) tell Linux that the
    console terminal type is `linux', or (b) make a link to or copy of the 
    linux entry in the appropriate place under your terminfo directory,
    named `console'.

    The way to change the wired-in console type is by editing /etc/inittab.
    Warning: this is not for the fainthearted, if you mess up your console
    getty entries you can make your system unusable!  However, if you are
    a distribution maker, this is the right thing to do (see the note for
    integrators near the end of this file).

    The easier way is to link or copy l/linux to c/console under your terminfo
    directory.  Note: this will go away next time you do `make install.data'
    and you'll have to redo it. 

IF YOU ARE A SYSTEM INTEGRATOR:

    Configuration and Installation:

	Configure with --prefix=/usr to make the install productions put
	libraries and headers in the correct locations (overwriting any
	previous curses libraries and headers).  This will put the terminfo 
	hierarchy under /usr/lib/terminfo; you may want to override this with
	--data-dir=/usr/share/misc/terminfo 

	Please configure the ncurses library in a pure-terminfo mode; that
	is, with the --disable-termcap option.   This will make the curses 
	library smaller and faster. The ncurses library includes a termcap 
	emulation that queries the terminfo database, so even applications 
	that use raw termcap to query terminal characteristics will win 
	(providing you recompile and relink them!).

	If you must configure with termcap fallback enabled, you may also
	wish to use the --enable-getcap option.  This option speeds up
	termcap-based startups, at the expense of not allowing personal
	termcap entries to reference the terminfo tree.  See the code in 
	ncurses/read_termcap.c for details.

    Keyboard Mapping:

	Some Linux console keyboard mappings as of 1995 are sub-optimal; a
	bit of tweaking would allow terminfo to make useful distinctions and
	conform better to the ANSI/ECMA-48 standard.  The following specific
	things should be changed:

	* Backspace should generate ^H, not ^?.
	* Shift-tab should generate \E[Z, not ^I.

	The terminfo master file assumes these mappings from version 9.11.3 up.
	Here are the loadkeys -d mappings that will set these up:

		keycode  14 = BackSpace       BackSpace
			alt     keycode  14 = Meta_BackSpace
		keycode  15 = Tab             Tab             
			alt     keycode  15 = Meta_Tab        
			shift	keycode  15 = F26
		string F26 ="\033[Z"

	but this is a kluge that uses up the F26 function key binding when
	it shouldn't.  The compiled-in defaults in the keyboard driver should
	be changed using the loadkeys -m option.

    Naming the Console Terminal

	In various Linuxes (and possibly elsewhere) there has been a practice
	of designating the system console driver type as `console'.  Please
	do not do this any more!  It complicates peoples' lives, because it
	can mean that several different terminfo entries from different 
	operating systems all logically want to be called `console'.

	Please pick a name unique to your console driver and set that up
	in the /etc/inittab table or local equivalent.  Send the entry to the
	terminfo maintainer (listed in the misc/terminfo file) to be included
	in the terminfo master, if it's not already there.  See the
	term(7) manual page included with this distribution for more on
	conventions for choosing type names.

	Here are our recommended primary console names for the most important
	freeware UNIX distributions:

		linux	-- Linux console driver
		freebsd	-- FreeBSD
		netbsd	-- NetBSD
		bsdos	-- BSD/OS

	If you are responsible for integrating ncurses for one of these
	distribution, please either use the recommended name or get back
	to us explaining why you don't want to, so we can work out nomenclature
	that will make users' lives easier rather than harder.

CONFIGURING FALLBACK ENTRIES
	In order to support operation of ncurses programs before the terminfo
	tree is accessible (that is, in single-user mode or at OS installation
	time) the ncurses library can be compiled to include an array of 
	pre-fetched fallback entries.

	These entries are checked by setupterm() only when the conventional
	fetches from the terminfo tree and the termcap fallback (if configured)
	have been tried and failed.  Thus, the presence of a fallback will not
	shadow modifications to the on-disk entry for the same type, when that
	entry is accessible.

	By default, there are no entries on the fallback list.  After you
	have built the ncurses suite for the first time, you can change
	the list (the process needs infocmp(1)).  To do so, use the
	script MKfallback.sh.

	If you wanted (say) to have linux, vt100, and xterm fallbacks, you
	would use the commands

		cd ncurses;
		MKfallback.sh linux vt100 xterm >fallback.c

	Then just rebuild and reinstall the library as you would normally.
	You can restore the default empty fallback list with

		MKfallback.sh >fallback.c

	The overhead for an empty fallback list is one trivial stub function.
	Any non-empty fallback list is consted and therefore lives in sharable
	text space.  You can look at the comment trailing each initializer in
	the generated ncurses/fallback.c file to see the core cost of the
	fallbacks.  A good rule of thumb for modern vt100-like entries is that
	each one will cost about 2.5K of text space.

BSD CONVERSION NOTES:
	(If you are distributing ncurses as a support-library component of
	an application you probably want to put the remainder of this section
	in the package README file.)

------------------------------- CUT HERE --------------------------------

If you are installing this application privately (either because you
have no root access or want to experiment with it before doing a root
installation), there are a couple of details you need to be aware of.
They have to do with the ncurses library, which uses terminfo rather
than termcap for describing terminal characteristics.

Though the ncurses library is terminfo-based, it will interpret your
TERMCAP variable (if present), any local termcap files you reference
through it, and the system termcap file.  However, in order to avoid
slowing down your application startup, it will only do this once per
terminal type!

The first time you load a given terminal type from your termcap
database, the library initialization code will automatically write it
in terminfo format to a subdirectory under $HOME/.terminfo.  After
that, the initialization code will find it there and do a (much
faster) terminfo fetch.

Usually, all this means is that your home directory will silently grow
an invisible .terminfo subdirectory which will get filled in with
terminfo descriptions of terminal types as you invoke them.  If anyone
ever installs a global terminfo tree on your system, this will quietly
stop happening and your $HOME/.terminfo will become redundant.

The objective of all this logic is to make converting from BSD termcap
as painless as possible without slowing down your application (termcap
compilation is expensive).

If you don't have a TERMCAP variable or custom personal termcap file,
you can skip the rest of this dissertation.

If you *do* have a TERMCAP variable and/or a custom personal termcap file
that defines a terminal type, that definition will stop being visible
to this application after the first time you run it, because it will
instead see the terminfo entry that it wrote to $HOME/terminfo the
first time around.

Subsequently, editing the TERMCAP variable or personal TERMCAP file
will have no effect unless you explicitly remove the terminfo entry
under $HOME/terminfo.  If you do that, the entry will be recompiled 
from your termcap resources the next time it is invoked.

To avoid these complications, use infocmp(1) and tic(1) to edit the
terminfo directory directly. 

------------------------------- CUT HERE --------------------------------

USING NCURSES WITH EMACS:
	GNU Emacs has its own termcap support.  By default, it uses a mixture
	of those functions and code linked from the host system's libraries.  
	You need to foil this and shut out the GNU termcap library entirely.
	The following patch to the linux config file will accomplish this:

Diffs between last version checked in and current workfile(s):

--- 1.1	1995/11/20 23:37:28
+++ src/s/linux.h	1995/11/25 00:40:52
@@ -192,7 +192,6 @@
 
 /* Best not to include -lg, unless it is last on the command line */
 #define LIBS_DEBUG
-#define LIBS_TERMCAP -ltermcap -lcurses /* save some space with shared libs*/
 #ifndef __ELF__
 #define LIB_STANDARD -lc /* avoid -lPW */
 #else
@@ -207,6 +206,13 @@
 #ifdef THIS_IS_CONFIGURE
 #define C_DEBUG_SWITCH
 #endif
+
+/* Use terminfo, not termcap, and pick up the ncurses library. 
+   Note: in the future the standard base name of the library will
+   probably become libcurses rather than libncurses.  At that point,
+   the LIBS_TERMCAP line below can go away.  */
+#define TERMINFO
+#define LIBS_TERMCAP	"-lncurses"
 
 /* Let's try this out, just in case.
    Nah.  Rik Faith <faith@cs.unc.edu> says it doesn't work well.  */

End of diffs.

	We have submitted it for the 19.30 release, so it may already be
	applied in your sources -- check for the #define TERMINFO.

BUGS:
	Send any feedback to the ncurses mailing list at
	ncurses-list@netcom.com. To subscribe send mail to
	listserv@netcom.com with body that reads:
	subscribe ncurses-list <your-email-address-here>

