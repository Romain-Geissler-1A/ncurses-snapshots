.TH curs_addch 3X ""
.SH NAME
\fBcurs_addch\fR: \fBaddch\fR, \fBwaddch\fR, \fBmvaddch\fR, \fBmvwaddch\fR,
\fBechochar\fR, \fBwechochar\fR - add a character (with attributes) to a
\fBncurses\fR window, then advance the cursor
.SH SYNOPSIS
\fB#include <curses.h>\fR

\fBaddch(chtype ch);\fR
.br
\fBwaddch(WINDOW *win, chtype ch);\fR
.br
\fBmvaddch(int y, int x, chtype ch);\fR
.br
\fBmvwaddch(WINDOW *win, int y, int x, chtype ch);\fR
.br
\fBechochar(chtype ch);\fR
.br
\fBwechochar(WINDOW *win, chtype ch);\fR
.br
.SH DESCRIPTION
The \fBaddch\fR, \fBwaddch\fR, \fBmvaddch\fR and \fBmvwaddch\fR routines put
the character \fIch\fR into the given window at its current window position,
which is then advanced.  They are analogous to \fBputchar\fR in \fBstdio\fR(3).
If the advance is at the right margin, the cursor automatically wraps to the
beginning of the next line.  At the bottom of the scrolling region, if
\fBscrollok\fR is enabled, the scrolling region is scrolled up one line.

If \fIch\fR is a tab, newline, or backspace, the cursor is moved appropriately
within the window.  A newline also does a \fBclrtoeol\fR before moving.  The
behavior of a newline is also controlled by the current status of nonl(). Tabs
are considered to be at every eighth column.

If \fIch\fR is any control character other than tab, newline, or backspace, it
is drawn in \fB^\fR\fIX\fR notation.  Calling \fBwinch\fR after adding a
control character does not return the control character, but instead returns
the representation of the control character.  (To emit control characters
literally, use \fBechochar\fR.)

Video attributes can be combined with a character by OR-ing them into the
parameter.  This results in these attributes also being set.  (The intent here
is that text, including attributes, can be copied from one place to another
using \fBinch\fR and \fBaddch\fR.)  [see \fBstandout\fR, predefined video
attribute constants, on the curs_attr(3X) page].

The \fBechochar\fR and \fBwechochar\fR routines are functionally equivalent to
a call to \fBaddch\fR followed by a call to \fBrefresh\fR, or a call to
\fBwaddch\fR followed by a call to \fBwrefresh\fR.  The knowledge that only a
single character is being output is taken into consideration and, for
non-control characters, a considerable performance gain might be seen by using
these routines instead of their equivalents.
.SS Line Graphics
The following variables may be used to add line drawing characters to the
screen with routines of the \fBaddch\fR family.  The default character listed
below is used if the \fBacsc\fR capability doesn't define a terminal-specific
replacement for it (but see the EXTENSIONS section below).  The names are
taken from the the VT100 nomenclature.

.TS
l l l
_ _ _
l l l.
\fIName\fR	\fIDefault\fR	\fIDescription\fR
ACS_ULCORNER	+	upper left-hand corner
ACS_LLCORNER	+	lower left-hand corner
ACS_URCORNER	+	upper right-hand corner
ACS_LRCORNER	+	lower right-hand corner
ACS_RTEE	+	right tee
ACS_LTEE	+	left tee
ACS_BTEE	+	bottom tee
ACS_TTEE	+	top tee
ACS_HLINE	-	horizontal line
ACS_VLINE	|	vertical line
ACS_PLUS	+	plus
ACS_S1  	-	scan line 1
ACS_S9  	\&_	scan line 9
ACS_DIAMOND	+	diamond
ACS_CKBOARD	:	checker board (stipple)
ACS_DEGREE	'	degree symbol
ACS_PLMINUS	#	plus/minus
ACS_BULLET	o	bullet
ACS_LARROW	<	arrow pointing left
ACS_RARROW	>	arrow pointing right
ACS_DARROW	v	arrow pointing down
ACS_UARROW	^	arrow pointing up
ACS_BOARD	#	board of squares
ACS_LANTERN	#	lantern symbol
ACS_BLOCK	#	solid square block
.TE

.SH RETURN VALUE
All routines return the integer \fBERR\fR upon failure and \fBOK\fR on success
(the SVr4 manuals specify only "an integer value other than \fBERR\fR") upon
successful completion, unless otherwise noted in the preceding routine
descriptions.
.SH NOTES
Note that \fBaddch\fR, \fBmvaddch\fR, \fBmvwaddch\fR, and
\fBechochar\fR may be macros.
.SH EXTENSIONS
The following extended \fBncurses\fR features are available only on PC-clone
consoles and compatible terminals (and are not part of XSI curses).

First, ncurses will automatically set up a better set of
ACS defaults including the IBM high-half forms-drawing characters.  SVr4 does
not do this.  These defaults may be overridden by an acsc capability.

There is a new attribute PC_CHARSET which forces literal display of PC ROM
characters.  Your console driver may still capture or translate a few (such as
ESC) but this feature should give you access to the card-suit characters, up
and down-arrow, and most others in the range 0-32.

Giving \fBwechochar\fR an argument with its high bit set will produce the
corresponding high-half ASCIIZ graphic (SVr4 curses also has this feature but
does not document it).  A control-character argument, however, will not
typically produce the corresponding graphic; characters such as CR, NL, FF and
TAB are typically interpreted by the console driver itself, and ESC will be
interpreted as the leader of a control sequence.
.SH PORTABILITY
All these functions are described in the XSI Curses standard, Issue 4.
The defaults specified for forms-drawing characters apply in the POSIX locale.
.SH SEE ALSO
\fBncurses\fR(3X), \fBcurs_attr\fR(3X), \fBcurs_clear\fR(3X),
\fBcurs_inch\fR(3X), \fBcurs_outopts\fR(3X), \fBcurs_refresh\fR(3X),
\fBputc\fR(3S).
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
