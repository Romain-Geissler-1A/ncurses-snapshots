# Makefile for ncurses source code.
#
# This makes the following:
#	programs
#	includes
#	libraries (normal/debug/profile/shared)
#
# The variable 'srcdir' refers to the source-distribution, and can be set with
# the configure script by "--srcdir=DIR".
#
# The rules are organized to produce the libraries for the configured models,
# and the programs with the configured default model.

# turn off _all_ suffix rules; we'll generate our own
.SUFFIXES:

SHELL		= /bin/sh
THIS		= Makefile

MODEL		= @DFT_LWR_MODEL@
srcdir		= @srcdir@
VPATH		= @srcdir@
prefix		= @prefix@
exec_prefix	= @exec_prefix@
bindir		= $(exec_prefix)/bin
libdir		= $(exec_prefix)/lib
includedir	= @includedir@

# We'd put terminfo in /usr/share/terminfo, but that's not the convention...
ticdir		= @datadir@

OWNER		= -o bin -g bin
INSTALL		= @INSTALL@ $(OWNER)
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@

AWK		= @AWK@

CC		= @CC@
CFLAGS		= @CFLAGS@

CPPFLAGS	= @LIB_INCLUDES@ \
		  -DHAVE_CONFIG_H -DTERMINFO=\"$(ticdir)\"

CCFLAGS		= $(CPPFLAGS) $(CFLAGS)

CFLAGS_NORMAL	= $(CCFLAGS)
CFLAGS_DEBUG	= $(CCFLAGS) -g -DTRACE
CFLAGS_PROFILE	= $(CCFLAGS) -pg
CFLAGS_SHARED	= $(CCFLAGS) @CC_SHARED_OPTS@

CFLAGS_DEFAULT	= $(CFLAGS_@DFT_UPR_MODEL@)

LINK		= $(CC)
LDFLAGS		= @LDFLAGS@ @LD_MODEL@ @LIBS@

MK_SHARED_LIB	= @MK_SHARED_LIB@

RANLIB		= @RANLIB@

LIBRARIES	= @LIBS_TO_MAKE@

PROGS = tic infocmp clear tput

TESTPROGS = mvcur tctest hardscroll

AUTO_SRC = \
	Caps.filtered \
	comp_captab.c \
	hashsize.h \
	keys.tries \
	lib_keyname.c \
	names.c \
	parametrized.h \
	term.h \
	termsort.c

# Default library, for linking applications
LIB_CURSES = libncurses@DFT_DEP_SUFFIX@

################################################################################
all:	$(AUTO_SRC) $(LIBRARIES) $(PROGS) 

libs:	$(LIBRARIES)

install: install.libs install.progs 

install.libs: term.h $(LIBRARIES) $(includedir) $(libdir)
	$(INSTALL_DATA) term.h $(includedir)/term.h
	$(INSTALL_DATA) $(srcdir)/curses.h $(includedir)/curses.h
	$(INSTALL_DATA) $(srcdir)/unctrl.h $(includedir)/unctrl.h
	$(INSTALL_DATA) $(srcdir)/panel.h $(includedir)/panel.h
	$(INSTALL_DATA) $(srcdir)/termcap.h $(includedir)/termcap.h
	@for lib in $(LIBRARIES); do \
		echo installing $${lib} as $(libdir)/$${lib}; \
		$(INSTALL_DATA) $${lib} $(libdir)/$${lib}; \
		$(RANLIB) $(libdir)/$${lib}; \
	done
	@echo "Make sure you delete any old header files!"

# This rule is provided only as a convenience here; normally "make install"
# is invoked from the top directory.
install.man:
	(cd ../man; $(MAKE) @nc_cv_makeflags@ TERMINFO=$(ticdir) INSTALL="$(INSTALL)" MAN=$(MAN) )

install.progs: $(PROGS) $(bindir)
	$(INSTALL_PROGRAM) tic $(bindir)/tic
	$(INSTALL_PROGRAM) infocmp $(bindir)/infocmp
	$(INSTALL_PROGRAM) clear $(bindir)/clear
	$(INSTALL_PROGRAM) tput $(bindir)/tput
	@echo "linking captoinfo to tic"
	-@rm -f $(bindir)/captoinfo
	-@ln $(bindir)/tic $(bindir)/captoinfo

install.data: $(ticdir)
	-rm -f do.tic
	echo "TERMINFO=$(ticdir)">do.tic
	echo "export TERMINFO">>do.tic
	echo "rm -fr $(ticdir)/[0-9A-Za-z]">>do.tic
	echo "$(bindir)/tic -v ../misc/terminfo.src">>do.tic
	(sh do.tic)
	rm do.tic

$(bindir) \
$(includedir) \
$(libdir) \
$(ticdir) :
	$(srcdir)/../mkinstalldirs $@

lib:	term.h $(LIB_CURSES)	
	$(MAKE) @nc_cv_makeflags@ normal-lib

DEPS_TIC = \
	$(MODEL)/comp_main.o \
	$(MODEL)/dump_entry.o \
	$(MODEL)/write_entry.o \
	$(LIB_CURSES)
tic: $(DEPS_TIC)
	$(LINK) $(CFLAGS_DEFAULT) $(DEPS_TIC) $(LDFLAGS) -o $@

DEPS_CLEAR = \
	$(MODEL)/clear.o \
	$(LIB_CURSES)
clear: $(DEPS_CLEAR)
	$(LINK) $(CFLAGS_DEFAULT) $(DEPS_CLEAR) $(LDFLAGS) -o $@

DEPS_TPUT = \
	$(MODEL)/tput.o \
	$(LIB_CURSES)
tput: $(DEPS_TPUT)
	$(LINK) $(CFLAGS_DEFAULT) $(DEPS_TPUT) $(LDFLAGS) -o $@

DEPS_INFOCMP = \
	$(MODEL)/infocmp.o \
	$(MODEL)/dump_entry.o \
	$(LIB_CURSES)
infocmp: $(DEPS_INFOCMP)
	$(LINK) $(CFLAGS_DEFAULT) $(DEPS_INFOCMP) $(LDFLAGS) -o $@

# Use -g for debugging but -O if you're profiling with intent to determine
# COMPUTE_OVERHEAD
MVFLAGS = -O
DEPS_MVCUR = \
	lib_mvcur.c \
	$(MODEL)/comp_captab.o \
	$(MODEL)/comp_hash.o \
	$(MODEL)/dump_entry.o \
	$(LIB_CURSES)
mvcur: $(DEPS_MVCUR)
	$(LINK) $(CCFLAGS) -DTRACE -DMAIN $(MVFLAGS) $(DEPS_MVCUR) $(LDFLAGS) -o $@

DEPS_TCTEST = \
	captoinfo.c \
	$(LIB_CURSES)
tctest: $(DEPS_TCTEST)
	$(LINK) $(CCFLAGS) -DTRACE -DMAIN $(DEPS_TCTEST) $(LDFLAGS) -o $@

hardscroll: hardscroll.c
	$(LINK) $(CCFLAGS) -DMAINDEBUG hardscroll.c $(LDFLAGS) -o $@

keys.tries: $(srcdir)/keys.list
	$(AWK) -f $(srcdir)/MKkeys.awk $(srcdir)/keys.list > keys.tries

# For binary compatibility with SVr4, use GETMEXCLUDE=bool.  For strict
# conformance with the gratuitous and stupid change made in the XSI Curses
# standard, use GETMEXCLUDE=str
GETMEXCLUDE=bool

Caps.filtered: ${srcdir}/Caps
	grep -v '"getm"	*$(GETMEXCLUDE)' ${srcdir}/Caps >$@

term.h: Caps.filtered $(srcdir)/MKterm.h.awk
	$(AWK) -f $(srcdir)/MKterm.h.awk Caps.filtered > $@
	sh $(srcdir)/edit_cfg.sh ../include/config.h $@

hashsize.h: Caps.filtered $(srcdir)/MKhashsize.sh
	sh $(srcdir)/MKhashsize.sh >$@

comp_captab.c: hashsize.h Caps.filtered $(srcdir)/MKcaptab.awk
	sh $(srcdir)/MKcaptab.awk > $@

lib_keyname.c: $(srcdir)/keys.list $(srcdir)/MKkeyname.awk
	$(AWK) -f $(srcdir)/MKkeyname.awk $(srcdir)/keys.list > $@

names.c: Caps.filtered $(srcdir)/MKnames.awk
	$(AWK) -f $(srcdir)/MKnames.awk Caps.filtered
	cat boolnames boolfnames boolcodes numnames numfnames numcodes strnames strfnames strcodes> $@
	-rm -f boolnames boolfnames boolcodes numnames numfnames numcodes strnames strfnames strcodes

termsort.c: Caps.filtered $(srcdir)/termsort.sh
	sh $(srcdir)/termsort.sh >$@

parametrized.h: Caps.filtered $(srcdir)/termsort.sh
	sh $(srcdir)/parametrized.sh >$@

tags:
	ctags *.[ch]

TAGS:
	etags *.[ch]

clean:
	-rm -f tags TAGS do.tic *~
	-rm -f */*.o *.[oa] $(AUTO_SRC) $(TESTPROGS)
	-rm -f $(PROGS)

distclean: clean
	-rm -rf @nc_list_models@
	-rm -f Makefile \
	`if test X"${srcdir}" != X".";then echo curses.h;fi`

mostlyclean: clean

realclean: distclean

###############################################################################
# The remainder of this file is automatically generated during configuration
###############################################################################
